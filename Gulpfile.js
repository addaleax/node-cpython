'use strict'var gulp = require("gulp");var babel = require("gulp-babel");var mocha = require('gulp-mocha');var karma = require('gulp-karma');var gutil = require('gulp-util');var git = require('gulp-git');var del = require('del');var fs = require("fs");var gulpJsdoc2md = require("gulp-jsdoc-to-markdown");var concat = require("gulp-concat");// =============================================================================// ================================= Build:lib =================================// =============================================================================gulp.task("clone:cpython", function () {  let opts = { args: 'cpython', cwd: 'lib/', quiet: false};  git.clone('https://github.com/python/cpython',opts , function (err) {    if (err) throw err  });});gulp.task('clean:cpython', function (cb) {  del([    'Doc',    //'setup.py',    //'install-sh',    //'.hg*',    //'**/*.+(in|ac|sub|m4|guess)',    //'Tools',    //'Misc',    //'Mac',    //'PC',    '.git',    //'Lib',    '.bzrignore', '.DS_store', '.gitignore'    // here we use a globbing pattern to match everything inside the `mobile` folder    //'dist/mobile/**/*',    // we don't want to clean this file though so we negate the pattern    //'!dist/mobile/deploy.json'  ], {cwd: 'lib/cpython'}, cb);});// =============================================================================// ================================= Compile:JS ================================// =============================================================================/****/gulp.task("babel", function () {  return gulp.src("./src/es6/**/*.js")    .pipe(babel())    .pipe(gulp.dest("./src/es5"));});// =============================================================================// ================================= Tests =====================================// =============================================================================/****/gulp.task('mocha', function() {  require('babel/register');  return gulp.src(['test/**/*.spec.js'], { read: false })    .pipe(mocha({      reporter: 'spec',      compilers: 'js:babel/register'//,      //  globals: {      //   should: require('chai')      //  }    }));});// =============================================================================// ================================= Documentation  ============================// =============================================================================gulp.task("build:docs:md", function() {    return gulp.src("src/es6/cpython.js")        .pipe(concat("API.md"))        .pipe(gulpJsdoc2md())        .on("error", function(err){            gutil.log("jsdoc2md failed:", err.message);        })        .pipe(gulp.dest("doc"));});gulp.task('build:readme', function() {  return gulp.src(['doc/RM.md', 'doc/API.md', 'doc/LIC.md'])    .pipe(concat('README.md'))    .pipe(gulp.dest('.'));});// =============================================================================// ================================= Gulp  =====================================// =============================================================================/****/gulp.task('watch', function() {  gulp.watch('src/es6/**/*.js', gulp.series('babel'));  gulp.watch('test/**/*.spec.js', gulp.series('mocha'));  gulp.watch().on('error', gutil.log)});gulp.task('default', gulp.series(gulp.series('babel','mocha'), gulp.parallel('watch','babel')));